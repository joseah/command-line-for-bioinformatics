{
  "name": "Unixcommands-and-one-liners-for-exploratory-data-analysis",
  "tagline": "This repository contains useful information about basic unix commands and one-liners for exploratory data analysis",
  "body": "# Basic command-line utilities\r\n\r\n# System commands\r\n\r\nGet name of host (server)\r\n\r\n```bash\r\nhostname\r\n```\r\n\r\nGet username\r\n\r\n```bash\r\nwhoami\r\n```\r\n\r\n\r\nGet working directory\r\n\r\n```bash\r\npwd \r\n```\r\n\r\nShow current running processes\r\n\r\n```bash\r\ntop\t\r\n```\r\n\r\nShow content (files and directories) in current directory\r\n\r\n```bash\r\nls\r\n```\r\n\r\n```bash\r\nls -l\r\nls -la\r\nls -lah\r\nls -lahr\r\n```\r\n\r\n\r\nChange to parent directory\r\n\r\n```bash\r\ncd ..\r\n```\r\n\r\n\r\n\r\n\r\nChange to a directory\r\n\r\n```bash\r\ncd directory\r\n```\r\n\r\nCreate a directory\r\n\r\n```bash\r\nmkdir new_directory\r\n```\r\n\r\nChange name to a file\r\n\r\n```bash\r\nmv oldfile newfile\r\n```\r\n\r\nChange name to a directory\r\n\r\n```bash\r\nmv old_folder new_folder\r\n```\r\n\r\n# Permissions \r\n\r\nChange permissions to file \r\n\r\n```bash\r\nchmod 777 myfile\r\n```\r\n> This command sets to all users permissions to read, write and execute `myfile`\r\n\r\n\r\n# Text files\r\n\r\n\r\nCreate an empty file\r\n\r\n```bash\r\ntouch test.txt\r\n```\r\n\r\nFile editor\r\n\r\n```bash\r\nnano test.txt\r\n```\r\n\r\nTerminal pagers\r\n\r\n- more\r\n- less\r\n\r\n```bash\r\nmore text.txt\r\nless text.txt\r\n```\r\n\r\n# Text manipulation\r\n\r\n\r\n## cut\r\n\r\nGet second column of a file\r\n\r\n```bash\r\ncut -f2 newEx.map\r\n```\r\n\r\n```bash\r\ncut -f1,2 newEx.map\r\n```\r\n\r\n> `cut` assumes all columns are tab-separated. \r\n\r\n`-d` parameter is used to indicate the delimiter\r\n\r\n```bash\r\ncut -f1,2 -d' ' myfile.txt\r\n```\r\n\r\nIn this case we use a whitespace as delimiter.\r\n\r\n\r\n## grep\r\n\r\n`grep` searches for pattern in a file and returns all lines where the pattern was found.\r\n\r\n\r\n```bash\r\ngrep \"Jose\" myfile.txt\r\n```\r\n\r\nWith `-v` parameter, `grep` returns all lines where the pattern was **not** found.\r\n\r\n```bash\r\ngrep -v \"Jose\" myfile.txt\r\n```\r\n\r\nThe pipe operator `|` can be used to indicate an **OR** statement.\r\n\r\n```bash\r\ngrep 'Salazar\\|Maria' myfile.txt\r\n```\r\n\r\n`-w` command searches for exact patterns\r\n\r\n```bash\r\ngrep -w \"22\" newEx.map\r\n```\r\n\r\n## sed\r\n\r\n`sed` command can be used to substitute text\r\n\r\n\r\nSubstitute **first** occurrence of `apple` by `red`\r\n\r\n```bash\r\nsed 's/apple/red/' myfile.txt\r\n```\r\n\r\nSubstitute **all** occurrence of `apple` by `red`\r\n\r\n```bash\r\nsed 's/Jose/Juan/g' myfile.txt > output\r\n```\r\n\r\n# Combine commands\r\n\r\nWe use the `|` operator to combine commands.\r\n\r\n```bash\r\ngrep 'fruit' list_of_fruits.txt | grep 'apple'\r\n```\r\n\r\n\r\n# Save output of commands\r\n\r\nWe use the `>` operator to redirect the output to a file\r\n\r\nExample:\r\n\r\n```bash\r\nsed 's/apple/red/' list_of_fruits.txt > file.txt\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}